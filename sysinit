#!/bin/sh -e

export PATH="/bin:/sbin"

umask 022

. /libexec/tinit/common

trap 'tinit_panic "System initialization runtime failure"' EXIT

dmesg -n 4

################################################################################
# Mount required filesystems for initial OS operations.
################################################################################

mnt_opts="defaults,nodiratime,nosuid"

# Mount proc first as mount fetches mount point list from /proc/mounts when
# remounting.
title='Mounting proc filesystem'
if ! msg=$(mount -t proc \
                 -o $mnt_opts,noatime,noexec,nodev \
                 proc \
                 /proc 2>&1); then
	tinit_panic "$title failed" "$msg"
else
	tinit_info "$title"
fi

# Mount device nodes FS.
# Although size=4k,nr_inodes=128 seems large enough, initial mount of devtmpfs
# does not take these in account. Therefore can set no limit with respect to
# maximum allocatable memory size to handle device nodes life cycle.
# Kernel allocates required memory on-demand anyway...
title='Mounting device filesystem'
if ! msg=$(mount -t devtmpfs -o $mnt_opts,noatime,noexec dev /dev 2>&1); then
	tinit_panic "$title failed" "$msg"
else
	tinit_info "$title"
fi

# Remount root FS read-only. Do this after mounting /dev to prevent from further
# error when spawning an emergency shell. Otherwise, as root would be mounted
# read-only, shell could not open device nodes in read-write mode (/dev/null)...
title='Re-mounting root filesystem read-only'
if ! msg=$(mount -o remount,ro,nodiratime,noatime,nodev / 2>&1); then
	tinit_panic "$title failed" "$msg"
else
	tinit_info "$title"
fi

# Mount sysfs.
title='Mounting sys filesystem'
if ! msg=$(mount -t sysfs -o $mnt_opts,noatime,noexec,nodev sys /sys 2>&1); then
	tinit_panic "$title failed" "$msg"
else
	tinit_info "$title"
fi

# At last, mount the run state directory.
title='Mounting local state filesystem'
if ! msg=$(mount -t tmpfs \
                 -o $mnt_opts,relatime,noexec,size=256k,nr_inodes=128,mode=755 \
                 run \
                 /var/run 2>&1); then
	tinit_panic "$title failed" "$msg"
else
	tinit_info "$title"
fi

################################################################################
# Setup internal loopback network interface
################################################################################

ip addr change 127.0.0.1/8 dev lo
ip link set lo up
tinit_info "Setting up loopback interface"

################################################################################
# Start process supervision
################################################################################

title='Creating local service state directory'
if ! msg=$(mkdir -m 750 /var/run/init 2>&1); then
	tinit_panic "$title failed" "$msg"
else
	tinit_info "$title"
fi

treedir="/etc/init/current"
if ! test -d "$treedir"; then
	tinit_panic "Cannot change to supervision tree: No such directory"
fi
if ! test -x "$(which runsvdir)"; then
	tinit_panic "Cannot spawn runsvdir: No such executable"
fi

if ! test -x /libexec/tinit/shutdown; then
	tinit_panic "Cannot register shutdown handler: No such executable"
fi
if ! test -x "/etc/init/start"; then
	tinit_panic "Missing supervision tree start: No such executable"
fi

cd "$treedir"
exec env -i PATH="$PATH" TERM="$TERM" /etc/init/start
